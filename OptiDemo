// ==UserScript==
// @name         OptiFleet Demo Script
// @namespace    http://tampermonkey.net/
// @version      1.2
// @description  Replaces various elements to not display sensative information.
// @author       Matthew Axtell
// @run-at       document-start
// @match        https://foundryoptifleet.com/*
// @icon         https://foundryoptifleet.com/img/favicon-32x32.png
// @updateURL    https://raw.githubusercontent.com/Sufficingpit29/FoundryScript/refs/heads/main/OptiDemo
// @downloadURL  https://raw.githubusercontent.com/Sufficingpit29/FoundryScript/refs/heads/main/OptiDemo
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_xmlhttpRequest
// ==/UserScript==


// Remove all local storage items for this domain
//localStorage.clear();

localStorage.removeItem("storedCompanies");
localStorage.removeItem("selectedCompanyName");
localStorage.removeItem("selectedSiteName");

// Print all local storage items for this domain
console.log('Local Storage Items:', localStorage);


// Override the axios get method so we can intercept the response and modify it
function overrideAxios() {
    // Keep trying until axios is defined so we can override it as soon as possible
    if (typeof axios === 'undefined') { 
        setTimeout(overrideAxios, 0);
        return; 
    }

    // Save the original axios get method
    const originalGet = axios.get;

    // Override the axios get method
    axios.get = function(url, config) {
        // Define a mapping of URL patterns to their respective modification functions
        const urlPatterns = {
            '/SiteList': (data) => {
                data.sites.forEach((site, index) => {
                    site.siteName = `Demo Site ${index + 1}`;
                });

                // So we don't save the modified companies in local storage
                setInterval(() => {
                    localStorage.removeItem("storedCompanies");
                    localStorage.removeItem("selectedCompanyName");
                    localStorage.removeItem("selectedSiteName");
                }, 100);
            },
            '/Companies': (data) => {
                data.companies.forEach((company, index) => {
                    company.name = `Demo Company ${index + 1}`;
                });
            },
            '/zonePerformance': (data) => {
                data.zonePerformances.forEach((zone, index) => {
                    zone.zoneName = `Demo Zone ${index + 1}`;
                });
            },
            '/Issues': (data) => {
                data.miners.forEach((miner, index) => {
                    miner.account1 = `Demo Account 1_`;
                    miner.account2 = `Demo Account 2_`;
                    miner.account3 = `Demo Account 3_`;
                    miner.locationName = miner.locationName.replace(/^[^_]+/, 'Demo');
                });
            },
            '/MinerInfo': (data) => {
                data.miners = data.miners || [];
                data.miners.forEach((miner, index) => {
                    miner.account1 = `Demo Account 1_`;
                    miner.account2 = `Demo Account 2_`;
                    miner.account3 = `Demo Account 3_`;
                    miner.locationName = miner.locationName.replace(/^[^_]+/, 'Demo');
                    miner.subcustomerName = `Owner Name`;
                });

                if(data.individualMiner) {
                    data.individualMiner.account1 = `Demo Account 1_`;
                    data.individualMiner.account2 = `Demo Account 2_`;
                    data.individualMiner.account3 = `Demo Account 3_`;
                    data.individualMiner.locationName = data.individualMiner.locationName.replace(/^[^_]+/, 'Demo');
                    data.individualMiner.zoneName = `Zone`;
                    data.individualMiner.companyName = `Demo Company`;
                    data.individualMiner.subcustomerName = `Owner Name`;
                }
            },
            '/Layout': (data) => {
                console.log('Layout Data:', data);
                data.zones.forEach((zone, index) => {
                    zone.zoneName = zone.zoneName.replace(/^[^_]+/, 'Demo');
                    zone.agentName = zone.agentName.replace(/^[^_]+/, 'Demo');
                    zone.racks.forEach((rack, index) => {
                        console.log('Rack:', rack);
                        rack.agents.forEach((agent, index) => {
                            //agent = agent.replace(/^[^_]+/, 'Demo');
                        });
                        rack.rows.forEach((row, index) => {
                            console.log('Row:', row);
                            row.slotData.forEach((slot, index) => {
                                slot.standardizedLocationId = slot.standardizedLocationId.replace(/^[^_]+/, 'Demo');
                            });
                        });
                    });
                });
            },
            '/MinerActivity': (data) => {
                data.activities.forEach((activity, index) => {
                    activity.username = `username@foundrydigital.com`;
                });
            },
            '/sites': (data) => {
                data.sites.forEach((site, index) => {
                    site.siteName = `Demo Site ${index + 1}`;
                });
            },
            '/Weather': (data) => {
                data.siteName = `Demo Site`;
            },
            '/Users?userId': (data) => {
                data.users.forEach((user, index) => {
                    user.firstName = `First_${index + 1}`;
                    user.lastName = `Last_${index + 1}`;
                });
            },
            '/Users/Pending': (data) => {
                data.users.forEach((user, index) => {
                    user.email = `email_${index + 1}@demo.com`;
                });
            },
            '/Agents': (data) => {
                data.agents.forEach((agent, index) => {
                    agent.agentName = `DemoAgent_${index + 1}`;
                });
            },
            '/agents': (data) => {
                data.agents.forEach((agent, index) => {
                    agent.agentName = `DemoAgent_${index + 1}`;
                });
            },
            '/Ticketing': (data) => {
                data.tickets.forEach((ticket, index) => {
                    ticket.site = ticket.site.replace(/^[^_]+/, 'Demo');
                    ticket.minerAccount = "Demo_Account";
                    ticket.zoneName = ticket.zoneName.replace(/^[^_]+/, 'Demo');
                });
            },
            '/KeyMetrics': (data) => {
                data.forEach((metric, index) => {
                    metric.siteName = `Demo Site`;
                });
            },
            '/HashratePerformanceReport': (data) => {
                data.forEach((miner, index) => {
                    miner.account1 = `Demo Account 1_`;
                    miner.account2 = `Demo Account 2_`;
                    miner.account3 = `Demo Account 3_`;
                    miner.locationName = miner.locationName.replace(/^[^_]+/, 'Demo');
                    miner.subcustomerName = `Owner Name`;
                });
            },
            '/FirmwareReport': (data) => {
                data.forEach((miner, index) => {
                    miner.account1 = `Demo Account 1_`;
                    miner.account2 = `Demo Account 2_`;
                    miner.account3 = `Demo Account 3_`;
                    miner.locationName = miner.locationName.replace(/^[^_]+/, 'Demo');
                    miner.subcustomerName = `Owner Name`;
                });
            },
            '/MinerPools': (data) => {
                data.miners.forEach((miner, index) => {
                    miner.siteName = miner.siteName.replace(/^[^_]+/, 'Demo');
                    miner.subcustomerName = `Owner Name`;
                });
            },
            '/energyreport': (data) => {
                data.egaugeData.data.result.forEach((result, index) => {
                    result.metric.facility = result.metric.facility.replace(/^[^_]+/, 'Demo');
                });
            },
            '/sensors': (data) => {
                data.sensors.forEach((sensor, index) => {
                    sensor.facility = sensor.facility.replace(/^[^_]+/, 'Demo');
                });
            }
        };


        // Check if the URL matches any of the patterns
        for (const pattern in urlPatterns) {
            if (url.includes(pattern)) {

                console.log('Intercepted axios response for URL:', url);

                // Call the original axios get method
                return originalGet.apply(this, arguments).then(response => {
                    // Modify the response data using the corresponding function
                    urlPatterns[pattern](response.data);

                    // Return the modified response
                    console.log('Modified axios response:', response);
                    return response;
                });
            }
        }

        

        // If the URL does not match, call the original axios get method
        return originalGet.apply(this, arguments);
    };
}
overrideAxios();


// Wait until user-wrapper class element exists and then grab it
function waitForElement(selector, time, callback) {
    let element = document.querySelector(selector);
    if(element) {
        // Run the callback function
        if(callback(element) === false) {
            setTimeout(function() {
                waitForElement(selector, time, callback);
            }, time);
        }
        return;
    }
    else {
        setTimeout(function() {
            waitForElement(selector, time, callback);
        }, time);
    }
}
waitForElement('.user-wrapper', 0, function(element) {
    // Gets all m-text elements and replaces the text content of the element that contains 'Welcome'
    const textElements = element.querySelectorAll('m-text');
    textElements.forEach(textElement => {
        if (textElement.textContent.includes('Welcome')) {
            textElement.textContent = 'Welcome User';
        }
    });
});

// Fix for the companies list in the users page
const currentUrl = window.location.href;
if (currentUrl.includes('Users')) {
    waitForElement('#companySelect', 0, function(selectElement) {
        const options = selectElement.querySelectorAll('option');
        
        // if it is empty, then the companies have not been loaded yet
        if (options.length === 0) {
            return false;
        }

        // Replace the company names with Demo Company
        options.forEach((option, index) => {
            if (index > 0) { // Skip the first option (All)
                option.textContent = `Demo Company ${index}`;
            }
        });
    });
}
